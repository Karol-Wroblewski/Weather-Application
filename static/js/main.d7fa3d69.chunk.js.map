{"version":3,"sources":["WeatherInformation.js","Error.js","SearchCity.js","App.js","serviceWorker.js","index.js"],"names":["Img","props","react_default","a","createElement","className","src","concat","icon","alt","WeatherInformation","date","WeatherInformation_Img","temperature","wind","Error","SearchCity","state","active","error","value","pressure","sunrise","sunset","showError","tab","handleApi","fetch","_this","then","response","ok","statusText","json","data","setState","current","temp_c","pressure_mb","wind_kph","condition","forecast","catch","handleInput","e","target","handleButton","preventDefault","length","Fragment","type","placeholder","this","onChange","onClick","src_Error","src_WeatherInformation","forecastday","day","avgtemp_c","avgvis_km","text","React","Component","Logo","App","App_Logo","src_SearchCity","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7fa3d69.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style/WeatherInformation.css';\r\nconst Img = (props) => <img className=\"cloud\" src={`${props.icon}`} alt=\"chmura\"></img>\r\n\r\n\r\nconst WeatherInformation = (props) => {\r\n\r\n    return(\r\n        <div className=\"info\">\r\n            <h2>{props.date}</h2>\r\n            <Img icon={props.icon} ></Img>\r\n            <ul>\r\n                <li>Temperatura: {props.temperature} °C</li>\r\n                <li>Wiatr: {props.wind} km/h</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInformation;","import React from 'react';\r\nimport './style/error.css'\r\nconst Error = () => {\r\n        return(\r\n            <div className=\"error\">\r\n                <span>Błędna nazwa miasta!</span>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Error;","import React from 'react'\r\nimport './style/SearchCity.css';\r\nimport WeatherInformation from './WeatherInformation';\r\nimport Error from './Error';\r\nclass SearchCity extends React.Component{\r\n\r\n    state = {\r\n        active: false,\r\n        error: false,\r\n        value: \"\",\r\n        temperature: \"\",\r\n        pressure: \"\",\r\n        wind: \"\",\r\n        icon: \"\",\r\n        sunrise: \"\",\r\n        sunset: \"\",\r\n        showError: true,\r\n        tab: \"\"\r\n    }\r\n\r\n    handleApi = () =>{\r\n     fetch(`https://api.apixu.com/v1/forecast.json?key=5fb808b748894e6fbbc220539192005&q=${this.state.value}&days=7`)\r\n     .then(response => {\r\n         if(!response.ok)\r\n            throw Error(response.statusText);\r\n        return response;\r\n     })\r\n     .then(response => response.json())\r\n     .then(data => {\r\n         this.setState({\r\n             temperature: data.current.temp_c,\r\n             pressure: data.current.pressure_mb,\r\n             wind: data.current.wind_kph,\r\n             icon: data.current.condition.icon,\r\n             active: 1,\r\n             error: false,\r\n             value: \"\",\r\n             showError: false,\r\n             tab: data.forecast,\r\n         })\r\n     })\r\n     .catch( () => \r\n         {\r\n            if(this.state.showError){\r\n            this.setState({\r\n            error: true,\r\n            active: false,\r\n            showError: true,\r\n         })\r\n        }\r\n\r\n     })\r\n    }\r\n     \r\n     \r\n    \r\n\r\n    handleInput = (e) => {\r\n        this.setState({\r\n            value: e.target.value,\r\n            showError: true,\r\n        })\r\n    }\r\n\r\n    handleButton = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.value.length < 1)\r\n            return;\r\n        else{\r\n            this.handleApi()\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <>\r\n                <form>\r\n                <input type=\"text\" className=\"smallInput\" placeholder=\"Podaj miasto\" value={this.state.value} onChange={this.handleInput} ></input>\r\n                <input type=\"submit\" value=\"sprawdź\" className=\"button\" onClick={this.handleButton}></input>\r\n                </form>\r\n                <div className=\"flex\">\r\n                {this.state.error ? <Error></Error> : null}\r\n                {this.state.active ? <WeatherInformation date=\"Dzisiaj\" temperature={this.state.temperature} pressure={this.state.pressure} wind={this.state.wind} icon={this.state.icon} ></WeatherInformation> : null}\r\n\r\n                {this.state.active ? <WeatherInformation date=\"Jutro\" temperature={this.state.tab.forecastday[1].day.avgtemp_c} pressure=\"0\" wind={this.state.tab.forecastday[1].day.avgvis_km}\r\n                icon={this.state.tab.forecastday[1].day.condition.icon} alt={this.state.tab.forecastday[1].day.condition.text}></WeatherInformation> : null}\r\n\r\n                {this.state.active ? <WeatherInformation date={this.state.tab.forecastday[2].date} temperature={this.state.tab.forecastday[2].day.avgtemp_c} pressure=\"0\" wind={this.state.tab.forecastday[2].day.avgvis_km}\r\n                icon={this.state.tab.forecastday[2].day.condition.icon} alt={this.state.tab.forecastday[2].day.condition.text}></WeatherInformation> : null}\r\n\r\n                {this.state.active ? <WeatherInformation date={this.state.tab.forecastday[3].date} temperature={this.state.tab.forecastday[3].day.avgtemp_c} pressure=\"0\" wind={this.state.tab.forecastday[3].day.avgvis_km}\r\n                icon={this.state.tab.forecastday[3].day.condition.icon} alt={this.state.tab.forecastday[3].day.condition.text}></WeatherInformation> : null}\r\n\r\n                {this.state.active ? <WeatherInformation date={this.state.tab.forecastday[4].date} temperature={this.state.tab.forecastday[4].day.avgtemp_c} pressure=\"0\" wind={this.state.tab.forecastday[4].day.avgvis_km}\r\n                icon={this.state.tab.forecastday[4].day.condition.icon} alt={this.state.tab.forecastday[4].day.condition.text}></WeatherInformation> : null}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchCity;","import React from 'react';\nimport './style/App.css';\nimport SearchCity from './SearchCity';\nimport './style/mobile.css'\nconst Logo = () => <h1 className=\"logo\">Pogoda na świecie</h1>\n\nclass App extends React.Component {\n  render () {\n    return (\n      <>\n      <header>\n      </header>\n      <Logo></Logo>\n      <SearchCity></SearchCity>\n      </>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}